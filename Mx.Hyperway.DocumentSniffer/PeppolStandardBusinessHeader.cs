namespace Mx.Hyperway.DocumentSniffer
{
    using System;
    using System.Collections.Generic;

    using Mx.Hyperway.DocumentSniffer.Identifier;
    using Mx.Peppol.Common.Model;

    /// <summary>
    /// Our representation of the SBDH(Standard Business Document Header), which makes us
    /// independent of the StandardBusinessDocumentHeader generated by JAXB.Furthermore
    /// the UN/CEFACT SBDH is kind of awkward to use as some of the elements of interest to us,
    /// are split into several fields.
    /// </summary>
    public class PeppolStandardBusinessHeader
    {
        /// <summary>
        /// Set the time to current and makes a random TransmissionIdentifier as default 
        /// </summary>
        /// <returns></returns>
        public static PeppolStandardBusinessHeader CreatePeppolStandardBusinessHeaderWithNewDate()
        {
            PeppolStandardBusinessHeader p = new PeppolStandardBusinessHeader();
            p.CreationDateAndTime = DateTime.Now;
            return p;
        }

        /// <summary>
        /// Empty constructor, no defaults - all must be supplied by user 
        /// </summary>
        public PeppolStandardBusinessHeader()
        {
            /* intentionally nothing */
        }

        public PeppolStandardBusinessHeader(Header header)
        {
            this.SenderId = header.Sender;
            this.RecipientId = header.Receiver;
            this.CreationDateAndTime = header.CreationTimestamp;
            this.DocumentTypeIdentifier = header.DocumentType;
            this.ProfileTypeIdentifier = header.Process;
            this.InstanceId = new InstanceId(header.Identifier.Identifier);
        }

        /// <summary>
        /// Copy constructor 
        /// </summary>
        /// <param name="peppolStandardBusinessHeader"></param>
        public PeppolStandardBusinessHeader(PeppolStandardBusinessHeader peppolStandardBusinessHeader)
        {
            this.RecipientId = peppolStandardBusinessHeader.RecipientId;
            this.SenderId = peppolStandardBusinessHeader.SenderId;
            this.DocumentTypeIdentifier = peppolStandardBusinessHeader.DocumentTypeIdentifier;
            this.ProfileTypeIdentifier = peppolStandardBusinessHeader.ProfileTypeIdentifier;
            this.InstanceId = peppolStandardBusinessHeader.InstanceId;
            this.CreationDateAndTime = peppolStandardBusinessHeader.CreationDateAndTime;
        }

        /// <summary>
        /// Do we have enough transport details to send the message? 
        /// </summary>
        /// <returns>true if transport details are complete.</returns>
        public bool IsComplete()
        {
            return ((this.RecipientId != null) &&
                    (this.SenderId != null) &&
                    (this.DocumentTypeIdentifier != null) &&
                    (this.ProfileTypeIdentifier != null) &&
                    (this.InstanceId != null) &&
                    (this.CreationDateAndTime != null));
        }

        /// <summary>
        /// Returns a list of property names that are still missing. 
        /// </summary>
        /// <returns>empty list if headers are complete</returns>
        public List<String> ListMissingProperties()
        {
            List<String> mhf = new List<string>();
            if (this.RecipientId == null) mhf.Add("recipientId");
            if (this.SenderId == null) mhf.Add("senderId");
            if (this.DocumentTypeIdentifier == null) mhf.Add("peppolDocumentTypeId");
            if (this.ProfileTypeIdentifier == null) mhf.Add("profileTypeIdentifier");
            if (this.InstanceId == null) mhf.Add("messageId");
            if (this.CreationDateAndTime == null) mhf.Add("creationDateAndTime");
            return mhf;
        }

        /// <summary>
        /// Peppol Participant Identification for the recipient
        /// </summary>
        public ParticipantIdentifier RecipientId { get; set; }

        /// <summary>
        /// Peppol Participant Identification for the sender
        /// </summary>
        public ParticipantIdentifier SenderId { get; set; }
        
        /// <summary>
        /// Represents the unique identity of the message envelope. It is not the same as the ID of the
        /// business message (such as the Invoice number). Nor is it the same as the transmission Message ID
        /// generated by the application sending the message (as defined in AS2).
        /// <p>
        /// This messageId is not the same as the "AS2 Message-ID" or the "START message id", which really are
        /// unique "transmission id's" that should be unique for each transmission.</p>
        /// <p>
        /// <code>//StandardBusinessDocumentHeader/DocumentIdentification/InstanceIdentifier</code></p>
        /// </summary>
        public InstanceId InstanceId { get; set; }
        
        public DateTime? CreationDateAndTime { get; set; }

        /// <summary>
        /// The business process this document is a part of 
        /// </summary>
        public ProcessIdentifier ProfileTypeIdentifier { get; set; }

        /// <summary>
        /// The type of document to send
        /// </summary>
        public DocumentTypeIdentifier DocumentTypeIdentifier{ get; set; }

        public Header ToVefa()
        {
            PeppolDocumentTypeId documentTypeId = PeppolDocumentTypeId.ValueOf(this.DocumentTypeIdentifier.Identifier);

            return Header.Of(
                this.SenderId,
                this.RecipientId,
                this.ProfileTypeIdentifier,
                this.DocumentTypeIdentifier,
                this.InstanceId == null ? InstanceIdentifier.GenerateUuid() : this.InstanceId.ToVefa(),
                    InstanceType.Of(
                            documentTypeId.RootNameSpace,
                            documentTypeId.LocalName,
                            documentTypeId.Version                    ),
                this.CreationDateAndTime
            );
        }
    }
}
